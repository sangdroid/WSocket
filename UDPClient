#include <winsock2.h>
#include <stdlib.h>
#include <stdio.h>

#define BUFSIZE 512

void err_quit(char *msg){
    LPVOID lpMSgBuf;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER|
        FORMAT_MESSAGE_FROM_SYSTEM,
        NULL, WSAGetLastError(),
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR)&lpMSgBuf, 0 , NULL
    );
    MessageBox(NULL, (LPCTSTR)lpMSgBuf, msg, MB_ICONERROR);
    LocalFree(lpMSgBuf);
    exit(-1);
}
void error_display(char *msg)
{
    LPVOID  lpMSgBuf;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER|
        FORMAT_MESSAGE_FROM_SYSTEM,
        NULL, WSAGetLastError(),
        MAKELANGID(LANG_NEUTRAL,SUBLANG_DEFAULT),
        (LPTSTR)&lpMSgBuf, 0 , NULL
    );
    printf("[%s] %s", msg, (LPCTSTR)lpMSgBuf);
    LocalFree(lpMSgBuf);
}
int main(int argc, char* argv[])
{
    int retval;

    WSADATA wsa;
    if(WSAStartup(MAKEWORD(2,2), &wsa)!= 0)
        return -1;

    SOCKET sock = socket(AF_INET, SOCK_DGRAM, 0);
    if(sock == INVALID_SOCKET) err_quit("socket()");

    SOCKADDR_IN serveraddr;
    ZeroMemory(&serveraddr, sizeof(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_port = htons(9000);
    serveraddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    SOCKADDR_IN peeraddr;
    int addrlen;
    char buf[BUFSIZE+1];
    int len;


    while(1){
        printf("\n[data to send] ");
        if(fgets(buf, BUFSIZE+1, stdin) ==NULL)
            break;
        len = strlen(buf);
        if(buf[len-1] =='\n')
            buf[len-1] = '\0';
        if(strlen(buf) == 0)
            break;
        
        retval = sendto(sock, buf, strlen(buf),0,
        (SOCKADDR*)&serveraddr,sizeof(serveraddr));
        if(retval ==SOCKET_ERROR){
            error_display("sendto()");
            continue;
        }
        addrlen = sizeof(peeraddr);
        retval = recvfrom(sock, buf, BUFSIZE, 0,
        (SOCKADDR*)&peeraddr, &addrlen);
        if(retval == SOCKET_ERROR){
            error_display("recvfrom()");
            continue;
        }
        if(memcmp(&peeraddr, &serveraddr, sizeof(peeraddr))){
            printf("[systax error] wrong data!\n");
            continue;
        }

        buf[retval] = '\0';
        printf("[UDP client]%d received\n", retval);
        printf("[received data] %s\n", buf);
       

        
    }
    closesocket(sock);
    WSACleanup();
    return 0;
}
