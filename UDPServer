#include <winsock2.h>
#include <stdlib.h>
#include <stdio.h>
#pragma comment(lib, "ws2_32")
#define UNICODE 1
#define BUFSIZE 512

void err_quit(char *msg){
    LPVOID lpMSgBuf;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER|
        FORMAT_MESSAGE_FROM_SYSTEM,
        NULL, WSAGetLastError(),
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR)&lpMSgBuf, 0 , NULL
    );
    //MessageBox(NULL, (LPCTSTR)lpMSgBuf, msg, MB_ICONERROR);
    LocalFree(lpMSgBuf);
    exit(-1);
}
void error_display(char *msg)
{
    LPVOID  lpMSgBuf;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER|
        FORMAT_MESSAGE_FROM_SYSTEM,
        NULL, WSAGetLastError(),
        MAKELANGID(LANG_NEUTRAL,SUBLANG_DEFAULT),
        (LPTSTR)&lpMSgBuf, 0 , NULL
    );
    printf("[%s] %s", msg, (LPCTSTR)lpMSgBuf);
    LocalFree(lpMSgBuf);
}
int main(int argc, char* argv[])
{
    int retval;

    WSADATA wsa;
    if(WSAStartup(MAKEWORD(2,2), &wsa)!= 0)
        return -1;

    SOCKET sock = socket(AF_INET, SOCK_DGRAM, 0);
    if(sock == INVALID_SOCKET) err_quit("socket()");

    SOCKADDR_IN serveraddr;
    ZeroMemory(&serveraddr, sizeof(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_port = htons(9000);
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
    retval = bind(sock,(SOCKADDR*) &serveraddr,
    sizeof(serveraddr));
    if(retval == SOCKET_ERROR) err_quit("bind()");

    SOCKADDR_IN clientaddr;
    int addrlen;
    char buf[BUFSIZE+1];

    while(1){
        addrlen = sizeof(clientaddr);
        retval = recvfrom(sock, buf, BUFSIZE, 0,
        (SOCKADDR*)&clientaddr, &addrlen);
        if(retval == SOCKET_ERROR){
            error_display("recvfrom()");
            continue;
        }
        buf[retval] = '\0';
        printf("[UDP/%s:%d]%s\n", inet_ntoa(clientaddr.sin_addr),
        ntohs(clientaddr.sin_port), buf);

        retval = sendto(sock, buf, retval,0,
        (SOCKADDR*)&clientaddr, sizeof(clientaddr));
        if(retval ==SOCKET_ERROR){
            error_display("sendto()");
            continue;
        }
    }
    closesocket(sock);
}
